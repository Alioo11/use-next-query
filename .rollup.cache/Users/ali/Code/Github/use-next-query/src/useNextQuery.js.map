{"version":3,"file":"useNextQuery.js","sourceRoot":"","sources":["useNextQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import * as lodash from 'lodash-es';\n// import { useRouter } from 'next/router';\nimport qs from 'qs';\nimport { useRef, useEffect } from 'react';\nimport * as yup from 'yup';\n\n\ntype routerPushEventHander = () => void;\n\ninterface IQSOptions {\n  parseOptions: qs.IParseOptions;\n  stringifyOptions: qs.IStringifyOptions;\n  parsedQs: qs.ParsedQs;\n  defaultDecoder: qs.defaultDecoder;\n  defaultEncoder: qs.defaultEncoder;\n}\n\ninterface useNextQueryOptions {\n  initialState: any | undefined;\n  onBeforeQueryUpdate: routerPushEventHander;\n  onAfterQueryUpdate: routerPushEventHander;\n  qsConfig: IQSOptions;\n}\n\ninterface IQueryParamObserver {\n  callback: () => void; // TODO fix any type\n  subscriptionKey: string;\n}\n\nclass QueryParamObserver {\n  private observationList: IQueryParamObserver[] = [];\n  public subscribe = (key: string, callback: () => void) => {\n    const queryParamObserver: IQueryParamObserver = { callback: callback, subscriptionKey: key };\n    this.observationList.push(queryParamObserver);\n  };\n\n  public callSubscriptions = (currentState: any, previousState: any) => {\n    this.observationList.forEach((observationItem) => {\n      const { subscriptionKey, callback } = observationItem;\n      const isKeyValueSameInBothValues = lodash.isEqual(currentState[subscriptionKey], previousState[subscriptionKey]);\n      const isCallable = !isKeyValueSameInBothValues || subscriptionKey === null;\n      if (!isCallable) return;\n      callback();\n    });\n  };\n}\n\n/**\n * A custom hook for working with Next.js router and Yup schema validation.\n * @template T - The schema type for validation.\n * @param {yup.ObjectSchema<T>} schema - The Yup schema to validate the initial state.\n * @param {useNextQueryOptions} options - Options for the hook.\n *\n * @throws {Error} Throws an error if the initial state is not compatible with the provided schema.\n */\nconst useNextQuery = <T>(schema: yup.ObjectSchema<T>, options: useNextQueryOptions) => {\n  const { initialState, qsConfig, onBeforeQueryUpdate, onAfterQueryUpdate } = options;\n\n  const queryCurrentState = useRef<any>(null);\n  const queryPreviousState = useRef<any>(null);\n  const paramObserver = new QueryParamObserver();\n\n  // const router = useRouter();\n  const isInitialStateValid = schema.test(initialState);\n  if (!isInitialStateValid) throw new Error('initial state is not compatible with provided schema');\n\n  type schemaAsType = yup.InferType<typeof schema>;\n\n  /**@type {update: (key: keyof yup.InferType<T>, value: yup.InferType<T[keyof T]>): void};*/\n  type UpdateFunction = <K extends keyof schemaAsType>(key: K, value: schemaAsType[K]) => void;\n  const update: UpdateFunction = (key, value) => (queryCurrentState.current[key] = value);\n\n  /**@type {update: (key: keyof yup.InferType<T>, callback: (yup.InferType<T[keyof T]>) => void): void};*/\n  type WatchFunction = <K extends keyof schemaAsType>(key: K, callback: (value: schemaAsType[K]) => void) => void;\n  const watch: WatchFunction = (key, callback) => paramObserver.subscribe(key as string, callback as any); // TODO fix any\n\n  // side effects\n  useEffect(() => {\n    queryCurrentState.current = initialState;\n  }, [initialState]);\n\n  useEffect(() => {\n    const isQueryStateChanged = !lodash.isEqual(queryCurrentState, queryPreviousState);\n    if (isQueryStateChanged) {\n      onBeforeQueryUpdate && onBeforeQueryUpdate();\n      queryPreviousState.current = queryCurrentState.current;\n\n      const stringifiedQuery = qs.stringify(queryCurrentState.current, qsConfig.stringifyOptions);\n      window.history.pushState({}, '', `?${stringifiedQuery}`);\n\n      paramObserver.callSubscriptions(queryCurrentState.current, queryPreviousState.current);\n      onAfterQueryUpdate && onAfterQueryUpdate();\n    }\n  }, [queryCurrentState]);\n\n  return {\n    update,\n    watch,\n    state: queryCurrentState,\n  };\n};\n\nexport default useNextQuery;\n"]}